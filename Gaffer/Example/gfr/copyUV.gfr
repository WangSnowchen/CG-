import Gaffer
import GafferImage
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

parent["variables"].addChild( Gaffer.NameValuePlug( "image:catalogue:port", Gaffer.IntPlug( "value", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "imageCataloguePort", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:name", Gaffer.StringPlug( "value", defaultValue = 'default', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectName", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:rootDirectory", Gaffer.StringPlug( "value", defaultValue = '$HOME/gaffer/projects/${project:name}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectRootDirectory", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["openColorIO"] = GafferImage.OpenColorIOConfigPlug( "openColorIO", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["openColorIO"] )
__children["defaultFormat"] = GafferImage.FormatPlug( "defaultFormat", defaultValue = GafferImage.Format( 1920, 1080, 1.000 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["defaultFormat"] )
__children["Plane"] = GafferScene.Plane( "Plane" )
parent.addChild( __children["Plane"] )
__children["Plane"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ShaderAssignment"] = GafferScene.ShaderAssignment( "ShaderAssignment" )
parent.addChild( __children["ShaderAssignment"] )
__children["ShaderAssignment"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Texture"] = GafferScene.OpenGLShader( "Texture" )
parent.addChild( __children["Texture"] )
__children["Texture"].loadShader( "Texture" )
__children["Texture"]["parameters"].addChild( Gaffer.FloatPlug( "mult", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Texture"]["parameters"].addChild( GafferImage.ImagePlug( "texture", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Texture"]["parameters"].addChild( Gaffer.Color4fPlug( "tint", defaultValue = imath.Color4f( 0, 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Texture"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ImageReader"] = GafferImage.ImageReader( "ImageReader" )
parent.addChild( __children["ImageReader"] )
__children["ImageReader"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["CopyPrimitiveVariables"] = GafferScene.CopyPrimitiveVariables( "CopyPrimitiveVariables" )
parent.addChild( __children["CopyPrimitiveVariables"] )
__children["CopyPrimitiveVariables"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter1"] = GafferScene.PathFilter( "PathFilter1" )
parent.addChild( __children["PathFilter1"] )
__children["PathFilter1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PlaneWithDifferentUVs"] = Gaffer.Box( "PlaneWithDifferentUVs" )
parent.addChild( __children["PlaneWithDifferentUVs"] )
__children["PlaneWithDifferentUVs"].addChild( GafferScene.Plane( "Plane1" ) )
__children["PlaneWithDifferentUVs"]["Plane1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PlaneWithDifferentUVs"].addChild( GafferScene.MapOffset( "MapOffset" ) )
__children["PlaneWithDifferentUVs"]["MapOffset"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PlaneWithDifferentUVs"].addChild( GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PlaneWithDifferentUVs"].addChild( GafferScene.PathFilter( "PathFilter" ) )
__children["PlaneWithDifferentUVs"]["PathFilter"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PlaneWithDifferentUVs"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["PlaneWithDifferentUVs"]["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["PlaneWithDifferentUVs"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["imageCataloguePort"]["value"].setValue( 41889 )
Gaffer.Metadata.registerValue( parent["variables"]["imageCataloguePort"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectName"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectRootDirectory"]["name"], 'readOnly', True )
__children["Plane"]["divisions"].setValue( imath.V2i( 10, 10 ) )
__children["Plane"]["__uiPosition"].setValue( imath.V2f( -15.3499985, 8.3983078 ) )
__children["ShaderAssignment"]["in"].setInput( __children["CopyPrimitiveVariables"]["out"] )
__children["ShaderAssignment"]["shader"].setInput( __children["Texture"]["out"] )
__children["ShaderAssignment"]["__uiPosition"].setValue( imath.V2f( -13.8499985, -27.667778 ) )
__children["Texture"]["parameters"]["mult"].setValue( 1.0 )
__children["Texture"]["parameters"]["texture"].setInput( __children["ImageReader"]["out"] )
__children["Texture"]["parameters"]["tint"]["r"].setValue( 1.0 )
__children["Texture"]["parameters"]["tint"]["a"].setValue( 1.0 )
__children["Texture"]["parameters"]["tint"]["g"].setInput( __children["Texture"]["parameters"]["tint"]["r"] )
__children["Texture"]["parameters"]["tint"]["b"].setInput( __children["Texture"]["parameters"]["tint"]["r"] )
__children["Texture"]["__uiPosition"].setValue( imath.V2f( -30.2499981, -27.667778 ) )
__children["ImageReader"]["fileName"].setValue( '${GAFFER_ROOT}/resources/images/macaw.exr' )
__children["ImageReader"]["__uiPosition"].setValue( imath.V2f( -40.0110283, -21.8135281 ) )
__children["CopyPrimitiveVariables"]["in"].setInput( __children["Plane"]["out"] )
__children["CopyPrimitiveVariables"]["filter"].setInput( __children["PathFilter1"]["out"] )
__children["CopyPrimitiveVariables"]["source"].setInput( __children["PlaneWithDifferentUVs"]["out"] )
__children["CopyPrimitiveVariables"]["primitiveVariables"].setValue( 'uv' )
__children["CopyPrimitiveVariables"]["sourceLocation"].setValue( '/planeWithDifferentUVs' )
__children["CopyPrimitiveVariables"]["__uiPosition"].setValue( imath.V2f( -13.8499985, -9.80000114 ) )
__children["PathFilter1"]["paths"].setValue( IECore.StringVectorData( [ '/plane' ] ) )
__children["PathFilter1"]["__uiPosition"].setValue( imath.V2f( 18.1663609, -4.8179698 ) )
__children["PlaneWithDifferentUVs"]["Plane1"]["name"].setValue( 'planeWithDifferentUVs' )
__children["PlaneWithDifferentUVs"]["Plane1"]["divisions"].setValue( imath.V2i( 10, 10 ) )
__children["PlaneWithDifferentUVs"]["Plane1"]["__uiPosition"].setValue( imath.V2f( 4.05000162, 9.29999924 ) )
__children["PlaneWithDifferentUVs"]["MapOffset"]["in"].setInput( __children["PlaneWithDifferentUVs"]["Plane1"]["out"] )
__children["PlaneWithDifferentUVs"]["MapOffset"]["filter"].setInput( __children["PlaneWithDifferentUVs"]["PathFilter"]["out"] )
__children["PlaneWithDifferentUVs"]["MapOffset"]["offset"].setValue( imath.V2f( 0.5, 0 ) )
__children["PlaneWithDifferentUVs"]["MapOffset"]["__uiPosition"].setValue( imath.V2f( 4.05000019, 1.13593674 ) )
__children["PlaneWithDifferentUVs"]["out"].setInput( __children["PlaneWithDifferentUVs"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["PlaneWithDifferentUVs"]["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["PlaneWithDifferentUVs"]["out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["PlaneWithDifferentUVs"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
__children["PlaneWithDifferentUVs"]["PathFilter"]["paths"].setValue( IECore.StringVectorData( [ '/planeWithDifferentUVs' ] ) )
__children["PlaneWithDifferentUVs"]["PathFilter"]["__uiPosition"].setValue( imath.V2f( 17.0500011, 7.21796799 ) )
__children["PlaneWithDifferentUVs"]["BoxOut"]["in"].setInput( __children["PlaneWithDifferentUVs"]["MapOffset"]["out"] )
Gaffer.Metadata.registerValue( __children["PlaneWithDifferentUVs"]["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["PlaneWithDifferentUVs"]["BoxOut"]["__out"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["PlaneWithDifferentUVs"]["BoxOut"]["__out"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["PlaneWithDifferentUVs"]["BoxOut"]["__out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["PlaneWithDifferentUVs"]["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
__children["PlaneWithDifferentUVs"]["__uiPosition"].setValue( imath.V2f( 3.80032706, 8.472682 ) )


del __children

