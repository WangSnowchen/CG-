import Gaffer
import GafferOSL
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 2, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["FaceSelection"] = Gaffer.Box( "FaceSelection" )
parent.addChild( __children["FaceSelection"] )
__children["FaceSelection"].addChild( GafferOSL.OSLObject( "OSLObject" ) )
__children["FaceSelection"]["OSLObject"]["primitiveVariables"].addChild( Gaffer.NameValuePlug( "customInt", Gaffer.IntPlug( "value", defaultValue = 0, ), True, "primitiveVariable", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["FaceSelection"]["OSLObject"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"].addChild( GafferScene.ScenePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"].addChild( GafferScene.FilterPlug( "filter", defaultValue = 0, minValue = 0, maxValue = 7, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"].addChild( GafferOSL.OSLCode( "OSLCode" ) )
__children["FaceSelection"]["OSLCode"]["parameters"].addChild( Gaffer.StringPlug( "faces", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"]["OSLCode"]["parameters"].addChild( Gaffer.IntPlug( "invert", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"]["OSLCode"]["parameters"].addChild( Gaffer.IntPlug( "elements", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"]["OSLCode"]["out"].addChild( Gaffer.IntPlug( "out", direction = Gaffer.Plug.Direction.Out, defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"]["OSLCode"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"].addChild( GafferScene.DeleteFaces( "DeleteFaces" ) )
__children["FaceSelection"]["DeleteFaces"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"].addChild( Gaffer.BoxIn( "BoxIn" ) )
__children["FaceSelection"]["BoxIn"].setup( GafferScene.ScenePlug( "out", ) )
__children["FaceSelection"]["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"].addChild( Gaffer.BoxIn( "BoxIn1" ) )
__children["FaceSelection"]["BoxIn1"].setup( GafferScene.FilterPlug( "out", defaultValue = 0, minValue = 0, maxValue = 7, ) )
__children["FaceSelection"]["BoxIn1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["FaceSelection"]["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["FaceSelection"]["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"].addChild( GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"].addChild( Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"].addChild( Gaffer.Dot( "Dot" ) )
__children["FaceSelection"]["Dot"].setup( GafferScene.ScenePlug( "in", ) )
__children["FaceSelection"]["Dot"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"]["Dot"].addChild( Gaffer.BoolPlug( "__uiInputConnectionsMinimised", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"].addChild( Gaffer.BoxIn( "BoxIn2" ) )
__children["FaceSelection"]["BoxIn2"].setup( Gaffer.StringPlug( "out", defaultValue = '', ) )
__children["FaceSelection"]["BoxIn2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"].addChild( Gaffer.StringPlug( "faces", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"].addChild( Gaffer.StringPlug( "attr_name", defaultValue = 'selected_faces', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"].addChild( Gaffer.BoolPlug( "del_faces", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"].addChild( Gaffer.BoxIn( "BoxIn3" ) )
__children["FaceSelection"]["BoxIn3"].setup( Gaffer.IntPlug( "out", defaultValue = 0, ) )
__children["FaceSelection"]["BoxIn3"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"].addChild( Gaffer.IntPlug( "sel_invert", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"].addChild( Gaffer.Expression( "Expression" ) )
__children["FaceSelection"]["Expression"]["__in"].addChild( Gaffer.StringPlug( "p0", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"]["Expression"]["__out"].addChild( Gaffer.IntPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FaceSelection"]["Expression"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
Gaffer.Metadata.registerValue( __children["FaceSelection"], 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( __children["FaceSelection"], 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( __children["FaceSelection"], 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( __children["FaceSelection"], 'noduleLayout:customGadget:addButtonRight:visible', False )
Gaffer.Metadata.registerValue( __children["FaceSelection"], 'icon', 'gafferSceneUISelectionTool.png' )
Gaffer.Metadata.registerValue( __children["FaceSelection"], 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( __children["FaceSelection"], 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )
__children["FaceSelection"]["OSLObject"]["in"].setInput( __children["FaceSelection"]["BoxIn"]["out"] )
__children["FaceSelection"]["OSLObject"]["filter"].setInput( __children["FaceSelection"]["BoxIn1"]["out"] )
__children["FaceSelection"]["OSLObject"]["adjustBounds"].setValue( False )
__children["FaceSelection"]["OSLObject"]["interpolation"].setValue( 2 )
__children["FaceSelection"]["OSLObject"]["primitiveVariables"]["primitiveVariable"]["name"].setInput( __children["FaceSelection"]["DeleteFaces"]["faces"] )
__children["FaceSelection"]["OSLObject"]["primitiveVariables"]["primitiveVariable"]["value"].setInput( __children["FaceSelection"]["OSLCode"]["out"]["out"] )
__children["FaceSelection"]["OSLObject"]["__uiPosition"].setValue( imath.V2f( 10.4499998, -2.05000019 ) )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["in"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["in"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["in"], 'layout:index', 4 )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["filter"], 'nodule:color', imath.Color3f( 0.689999998, 0.537800014, 0.228300005 ) )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["filter"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["filter"], 'description', 'The filter used to control which parts of the scene are\nprocessed. A Filter node should be connected here.' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["filter"], 'noduleLayout:section', 'right' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["filter"], 'plugValueWidget:type', 'GafferSceneUI.FilterPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["filter"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["filter"], 'layout:index', 6 )
__children["FaceSelection"]["OSLCode"]["parameters"]["faces"].setInput( __children["FaceSelection"]["BoxIn2"]["out"] )
__children["FaceSelection"]["OSLCode"]["parameters"]["invert"].setInput( __children["FaceSelection"]["BoxIn3"]["out"] )
__children["FaceSelection"]["OSLCode"]["parameters"]["elements"].setInput( __children["FaceSelection"]["Expression"]["__out"]["p0"] )
__children["FaceSelection"]["OSLCode"]["code"].setValue( '// for performance reasons. Can be increased as necessary\n#define MAX_SPLITS 200\n\n// some initializers...\nint face_id = 0;\ngetattribute("shading:index", face_id);\nint off = clamp(invert,0,1);\nint on = 1-off;\nout = off;\n\nif (faces != "")\n{\n\t// split input faces on \',\'\n\tstring faces_array[MAX_SPLITS];\n\tsplit( faces, faces_array, "," );\n\t\n\tint start_index, end_index;\n\tstring cur_range[2];\n\t\n\t// clamp loop to incoming elements. Otherwise the output would incorrectly select the first face (index 0)\n\tfor (int i=0; i<elements; i++)\n\t{\n\t\tstring cur_face = faces_array[i];\n\t\t\n\t\t// check ranges delimited by \'-\'\n\t\tif (regex_search(cur_face, "-") == 1)\n\t\t{\n\t\t\tsplit(cur_face, cur_range, "-");\n\t\t\tstart_index = stoi(cur_range[0]);\n\t\t\tend_index = stoi(cur_range[1]);\n\t\t\n\t\t\tfor (int d=start_index; d<end_index+1; d++){\n\t\t\t\tif (d == face_id){\n\t\t\t\t\tout = on;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif( stoi(cur_face) == face_id )\n\t\t\tout = on;\n\t}\n}' )
__children["FaceSelection"]["OSLCode"]["__uiPosition"].setValue( imath.V2f( -2.95000076, -1.45000017 ) )
__children["FaceSelection"]["DeleteFaces"]["enabled"].setInput( __children["FaceSelection"]["del_faces"] )
__children["FaceSelection"]["DeleteFaces"]["in"].setInput( __children["FaceSelection"]["OSLObject"]["out"] )
__children["FaceSelection"]["DeleteFaces"]["filter"].setInput( __children["FaceSelection"]["BoxIn1"]["out"] )
__children["FaceSelection"]["DeleteFaces"]["adjustBounds"].setValue( False )
__children["FaceSelection"]["DeleteFaces"]["faces"].setInput( __children["FaceSelection"]["attr_name"] )
__children["FaceSelection"]["DeleteFaces"]["__uiPosition"].setValue( imath.V2f( 10.4508734, -10.2140627 ) )
__children["FaceSelection"]["BoxIn"]["__in"].setInput( __children["FaceSelection"]["in"] )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn"]["__in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn"]["__in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn"]["__in"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn"]["__in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
__children["FaceSelection"]["BoxIn"]["__uiPosition"].setValue( imath.V2f( 10.4507408, 6.28203106 ) )
__children["FaceSelection"]["BoxIn1"]["name"].setValue( 'filter' )
__children["FaceSelection"]["BoxIn1"]["__in"].setInput( __children["FaceSelection"]["filter"] )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn1"]["__in"], 'nodule:color', imath.Color3f( 0.689999998, 0.537800014, 0.228300005 ) )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn1"]["__in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn1"]["__in"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn1"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn1"]["__in"], 'description', 'The filter used to control which parts of the scene are\nprocessed. A Filter node should be connected here.' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn1"]["__in"], 'noduleLayout:section', 'right' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn1"]["__in"], 'plugValueWidget:type', 'GafferSceneUI.FilterPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn1"]["out"], 'noduleLayout:section', 'left' )
__children["FaceSelection"]["BoxIn1"]["__uiPosition"].setValue( imath.V2f( 23.7640858, -6.13203049 ) )
__children["FaceSelection"]["__uiPosition"].setValue( imath.V2f( 10.4499998, 1.55390835 ) )
__children["FaceSelection"]["BoxOut"]["in"].setInput( __children["FaceSelection"]["DeleteFaces"]["out"] )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxOut"]["__out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
__children["FaceSelection"]["BoxOut"]["passThrough"].setInput( __children["FaceSelection"]["Dot"]["out"] )
__children["FaceSelection"]["BoxOut"]["enabled"].setInput( __children["FaceSelection"]["enabled"] )
__children["FaceSelection"]["BoxOut"]["__uiPosition"].setValue( imath.V2f( 11.9508734, -23.546093 ) )
__children["FaceSelection"]["out"].setInput( __children["FaceSelection"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["out"], 'layout:index', 5 )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["enabled"], 'layout:section', 'Node' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["enabled"], 'layout:index', 7 )
__children["FaceSelection"]["Dot"]["in"].setInput( __children["FaceSelection"]["BoxIn"]["out"] )
__children["FaceSelection"]["Dot"]["__uiPosition"].setValue( imath.V2f( 13.4508734, -18.546093 ) )
__children["FaceSelection"]["Dot"]["__uiInputConnectionsMinimised"].setValue( True )
__children["FaceSelection"]["BoxIn2"]["name"].setValue( 'faces' )
__children["FaceSelection"]["BoxIn2"]["__in"].setInput( __children["FaceSelection"]["faces"] )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn2"]["__in"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn2"]["__in"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn2"]["__in"], 'description', '' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn2"]["__in"], 'label', 'faces' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn2"]["__in"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn2"]["__in"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn2"]["__in"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn2"]["__in"], 'nodule:type', None )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn2"]["__in"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn2"]["__in"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn2"]["__in"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn2"]["__in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn2"]["out"], 'noduleLayout:section', 'right' )
__children["FaceSelection"]["BoxIn2"]["__uiPosition"].setValue( imath.V2f( -18.5854321, -0.250000119 ) )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["faces"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["faces"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["faces"], 'description', '' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["faces"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["faces"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["faces"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["faces"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["faces"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["faces"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["faces"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["faces"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["faces"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["faces"], 'layout:index', 0 )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["faces"], 'label', 'Face Selection' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["attr_name"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["attr_name"], 'description', 'Uniformly interpolated int, float or bool primitive variable to choose which faces to delete. Note a non-zero value indicates the face will be deleted.' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["attr_name"], 'label', 'Attribute Name' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["attr_name"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["attr_name"], 'layout:index', 2 )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["del_faces"], 'description', 'The on/off state of the node. When it is off, the node outputs the input scene unchanged.' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["del_faces"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["del_faces"], 'label', 'Delete Faces' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["del_faces"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["del_faces"], 'layout:index', 3 )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["del_faces"], 'divider', True )
__children["FaceSelection"]["BoxIn3"]["name"].setValue( 'sel_invert' )
__children["FaceSelection"]["BoxIn3"]["__in"].setInput( __children["FaceSelection"]["sel_invert"] )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn3"]["__in"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn3"]["__in"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn3"]["__in"], 'description', '' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn3"]["__in"], 'label', 'invert' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn3"]["__in"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn3"]["__in"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn3"]["__in"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn3"]["__in"], 'nodule:type', None )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn3"]["__in"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn3"]["__in"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn3"]["__in"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn3"]["__in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["BoxIn3"]["out"], 'noduleLayout:section', 'right' )
__children["FaceSelection"]["BoxIn3"]["__uiPosition"].setValue( imath.V2f( -18.4875774, -7.45065784 ) )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["sel_invert"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["sel_invert"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["sel_invert"], 'description', '' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["sel_invert"], 'label', 'Invert Selection' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["sel_invert"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["sel_invert"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["sel_invert"], 'plugValueWidget:type', 'GafferUI.BoolPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["sel_invert"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["sel_invert"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["sel_invert"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["sel_invert"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["sel_invert"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["sel_invert"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["FaceSelection"]["sel_invert"], 'layout:index', 1 )
__children["FaceSelection"]["Expression"]["__in"]["p0"].setInput( __children["FaceSelection"]["OSLCode"]["parameters"]["faces"] )
__children["FaceSelection"]["Expression"]["__uiPosition"].setValue( imath.V2f( -12.9113159, -2.45004249 ) )
__children["FaceSelection"]["Expression"]["__engine"].setValue( 'python' )
__children["FaceSelection"]["Expression"]["__expression"].setValue( 'faces = parent["__in"]["p0"]\nparent["__out"]["p0"] = len(faces.split(\',\'))' )


del __children

