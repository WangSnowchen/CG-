import Gaffer
import GafferImage
import GafferOSL
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 2, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

parent["variables"].addChild( Gaffer.NameValuePlug( "image:catalogue:port", Gaffer.IntPlug( "value", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "imageCataloguePort", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:name", Gaffer.StringPlug( "value", defaultValue = 'default', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectName", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:rootDirectory", Gaffer.StringPlug( "value", defaultValue = '$HOME/gaffer/projects/${project:name}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectRootDirectory", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["defaultFormat"] = GafferImage.FormatPlug( "defaultFormat", defaultValue = GafferImage.Format( 1920, 1080, 1.000 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["defaultFormat"] )
__children["MeshSegments"] = GafferScene.MeshSegments( "MeshSegments" )
parent.addChild( __children["MeshSegments"] )
__children["MeshSegments"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["TestGeo"] = Gaffer.Box( "TestGeo" )
parent.addChild( __children["TestGeo"] )
__children["TestGeo"].addChild( GafferScene.SceneReader( "SceneReader" ) )
__children["TestGeo"]["SceneReader"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["TestGeo"].addChild( GafferScene.DeleteFaces( "DeleteFaces" ) )
__children["TestGeo"]["DeleteFaces"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["TestGeo"].addChild( GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["TestGeo"].addChild( GafferScene.PathFilter( "PathFilter" ) )
__children["TestGeo"]["PathFilter"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["TestGeo"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["TestGeo"]["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["TestGeo"]["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["TestGeo"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["TestGeo"].addChild( GafferScene.DeletePrimitiveVariables( "DeletePrimitiveVariables" ) )
__children["TestGeo"]["DeletePrimitiveVariables"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter"] = GafferScene.PathFilter( "PathFilter" )
parent.addChild( __children["PathFilter"] )
__children["PathFilter"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"] = GafferOSL.OSLCode( "OSLCode" )
parent.addChild( __children["OSLCode"] )
__children["OSLCode"]["out"].addChild( Gaffer.Color3fPlug( "Cs", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLObject"] = GafferOSL.OSLObject( "OSLObject" )
parent.addChild( __children["OSLObject"] )
__children["OSLObject"]["primitiveVariables"].addChild( Gaffer.NameValuePlug( "Cs", Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "primitiveVariable", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OSLObject"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["imageCataloguePort"]["value"].setValue( 45951 )
Gaffer.Metadata.registerValue( parent["variables"]["imageCataloguePort"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectName"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectRootDirectory"]["name"], 'readOnly', True )
__children["MeshSegments"]["in"].setInput( __children["TestGeo"]["out"] )
__children["MeshSegments"]["filter"].setInput( __children["PathFilter"]["out"] )
__children["MeshSegments"]["__uiPosition"].setValue( imath.V2f( 9.0508604, -4.84999943 ) )
Gaffer.Metadata.registerValue( __children["TestGeo"], 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( __children["TestGeo"], 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( __children["TestGeo"], 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( __children["TestGeo"], 'noduleLayout:customGadget:addButtonRight:visible', False )
__children["TestGeo"]["SceneReader"]["fileName"].setValue( '${GAFFER_ROOT}/python/GafferSceneTest/usdFiles/segmentTestMesh.usd' )
__children["TestGeo"]["SceneReader"]["__uiPosition"].setValue( imath.V2f( 9.05038929, 11.1643829 ) )
__children["TestGeo"]["DeleteFaces"]["in"].setInput( __children["TestGeo"]["SceneReader"]["out"] )
__children["TestGeo"]["DeleteFaces"]["filter"].setInput( __children["TestGeo"]["PathFilter"]["out"] )
__children["TestGeo"]["DeleteFaces"]["adjustBounds"].setValue( False )
__children["TestGeo"]["DeleteFaces"]["faces"].setValue( 'spiral' )
__children["TestGeo"]["DeleteFaces"]["__uiPosition"].setValue( imath.V2f( 9.05038929, 3.0003202 ) )
__children["TestGeo"]["out"].setInput( __children["TestGeo"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["TestGeo"]["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["TestGeo"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["TestGeo"]["out"], 'description', 'The processed output scene.' )
__children["TestGeo"]["PathFilter"]["paths"].setValue( IECore.StringVectorData( [ '/plane' ] ) )
__children["TestGeo"]["PathFilter"]["__uiPosition"].setValue( imath.V2f( 22.9503899, 8.08235168 ) )
__children["TestGeo"]["BoxOut"]["in"].setInput( __children["TestGeo"]["DeletePrimitiveVariables"]["out"] )
Gaffer.Metadata.registerValue( __children["TestGeo"]["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["TestGeo"]["BoxOut"]["__out"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["TestGeo"]["BoxOut"]["__out"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["TestGeo"]["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["TestGeo"]["BoxOut"]["__out"], 'description', 'The processed output scene.' )
__children["TestGeo"]["BoxOut"]["__uiPosition"].setValue( imath.V2f( 10.5503893, -12.8175745 ) )
__children["TestGeo"]["__uiPosition"].setValue( imath.V2f( 9.0508604, 3.48203182 ) )
__children["TestGeo"]["DeletePrimitiveVariables"]["in"].setInput( __children["TestGeo"]["DeleteFaces"]["out"] )
__children["TestGeo"]["DeletePrimitiveVariables"]["filter"].setInput( __children["TestGeo"]["PathFilter"]["out"] )
__children["TestGeo"]["DeletePrimitiveVariables"]["names"].setValue( 'spiral' )
__children["TestGeo"]["DeletePrimitiveVariables"]["__uiPosition"].setValue( imath.V2f( 9.05038929, -4.48554325 ) )
__children["PathFilter"]["paths"].setValue( IECore.StringVectorData( [ '/plane' ] ) )
__children["PathFilter"]["__uiPosition"].setValue( imath.V2f( 24.281332, 0.132665634 ) )
__children["OSLCode"]["code"].setValue( 'int id;\ngetattribute( "segment", id );\nCs = hashnoise( id );\n' )
__children["OSLCode"]["__uiPosition"].setValue( imath.V2f( -4.4112978, -12.4140625 ) )
__children["OSLObject"]["in"].setInput( __children["MeshSegments"]["out"] )
__children["OSLObject"]["filter"].setInput( __children["PathFilter"]["out"] )
__children["OSLObject"]["interpolation"].setValue( 2 )
__children["OSLObject"]["primitiveVariables"]["primitiveVariable"]["value"].setInput( __children["OSLCode"]["out"]["Cs"] )
__children["OSLObject"]["__uiPosition"].setValue( imath.V2f( 9.0508604, -13.0140619 ) )


del __children

