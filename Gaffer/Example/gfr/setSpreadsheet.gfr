import Gaffer
import GafferImage
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 13, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 1, persistent=False )

__children = {}

parent["variables"].addChild( Gaffer.NameValuePlug( "image:catalogue:port", Gaffer.IntPlug( "value", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "imageCataloguePort", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:name", Gaffer.StringPlug( "value", defaultValue = 'default', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectName", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:rootDirectory", Gaffer.StringPlug( "value", defaultValue = '$HOME/gaffer/projects/${project:name}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectRootDirectory", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["openColorIO"] = GafferImage.OpenColorIOConfigPlug( "openColorIO", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["openColorIO"] )
__children["defaultFormat"] = GafferImage.FormatPlug( "defaultFormat", defaultValue = GafferImage.Format( 1920, 1080, 1.000 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["defaultFormat"] )
__children["Set"] = GafferScene.Set( "Set" )
parent.addChild( __children["Set"] )
__children["Set"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter"] = GafferScene.PathFilter( "PathFilter" )
parent.addChild( __children["PathFilter"] )
__children["PathFilter"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["SceneReader"] = GafferScene.SceneReader( "SceneReader" )
parent.addChild( __children["SceneReader"] )
__children["SceneReader"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Spreadsheet"] = Gaffer.Spreadsheet( "Spreadsheet" )
parent.addChild( __children["Spreadsheet"] )
__children["Spreadsheet"]["rows"].addColumn( Gaffer.StringVectorDataPlug( "paths", defaultValue = IECore.StringVectorData( [  ] ), ) )
__children["Spreadsheet"]["rows"].addRows( 3 )
__children["Spreadsheet"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["SetVisualiser"] = GafferScene.SetVisualiser( "SetVisualiser" )
parent.addChild( __children["SetVisualiser"] )
__children["SetVisualiser"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter1"] = GafferScene.PathFilter( "PathFilter1" )
parent.addChild( __children["PathFilter1"] )
__children["PathFilter1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["imageCataloguePort"]["value"].setValue( 38737 )
Gaffer.Metadata.registerValue( parent["variables"]["imageCataloguePort"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectName"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectRootDirectory"]["name"], 'readOnly', True )
__children["Set"]["in"].setInput( __children["SceneReader"]["out"] )
__children["Set"]["filter"].setInput( __children["PathFilter"]["out"] )
__children["Set"]["name"].setInput( __children["Spreadsheet"]["enabledRowNames"] )
__children["Set"]["setVariable"].setValue( 'set' )
__children["Set"]["__uiPosition"].setValue( imath.V2f( -5.84999943, 5.04999971 ) )
__children["PathFilter"]["paths"].setInput( __children["Spreadsheet"]["out"]["paths"] )
__children["PathFilter"]["__uiPosition"].setValue( imath.V2f( 17.9499989, 10.3500004 ) )
__children["SceneReader"]["fileName"].setValue( '${GAFFER_ROOT}/resources/gafferBot/caches/gafferBot.scc' )
__children["SceneReader"]["__uiPosition"].setValue( imath.V2f( -5.84999943, 17.9500008 ) )
__children["Spreadsheet"]["selector"].setValue( '${set}' )
__children["Spreadsheet"]["rows"][1]["name"].setValue( 'eyes' )
__children["Spreadsheet"]["rows"][1]["cells"]["paths"]["value"].setValue( IECore.StringVectorData( [ '/GAFFERBOT/C_torso_GRP/C_head_GRP/L_eye_GRP/L_eye_CPT/L_eyeLens001_REN', '/GAFFERBOT/C_torso_GRP/C_head_GRP/R_eye_GRP/R_eye_CPT/R_eyeLens001_REN' ] ) )
__children["Spreadsheet"]["rows"][2]["name"].setValue( 'feet' )
__children["Spreadsheet"]["rows"][2]["cells"]["paths"]["value"].setValue( IECore.StringVectorData( [ '/GAFFERBOT/C_torso_GRP/R_legUpper_GRP/R_legLower_GRP/R_foot_GRP/R_foot_CPT/R_foot002_REN', '/GAFFERBOT/C_torso_GRP/R_legUpper_GRP/R_legLower_GRP/R_foot_GRP/R_foot_CPT/R_foot001_REN', '/GAFFERBOT/C_torso_GRP/L_legUpper_GRP/L_legLower_GRP/L_foot_GRP/L_foot_CPT/L_foot002_REN', '/GAFFERBOT/C_torso_GRP/L_legUpper_GRP/L_legLower_GRP/L_foot_GRP/L_foot_CPT/L_foot001_REN' ] ) )
__children["Spreadsheet"]["rows"][3]["name"].setValue( 'hands' )
__children["Spreadsheet"]["rows"][3]["cells"]["paths"]["value"].setValue( IECore.StringVectorData( [ '/GAFFERBOT/C_torso_GRP/R_armUpper_GRP/R_armLower_GRP/R_clawBottom_GRP/R_clawBottom_CPT/R_clawBottom001_REN', '/GAFFERBOT/C_torso_GRP/R_armUpper_GRP/R_armLower_GRP/R_clawTop_GRP/R_clawTop_CPT/R_clawTop001_REN', '/GAFFERBOT/C_torso_GRP/L_armUpper_GRP/L_armLower_GRP/L_clawTop_GRP/L_clawTop_CPT/L_clawTop001_REN', '/GAFFERBOT/C_torso_GRP/L_armUpper_GRP/L_armLower_GRP/L_clawBottom_GRP/L_clawBottom_CPT/L_clawBottom001_REN' ] ) )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["paths"], 'spreadsheet:columnWidth', 301 )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["paths"]["value"], 'ui:scene:acceptsSetName:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["paths"]["value"], 'ui:scene:acceptsSetNames:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["paths"]["value"], 'ui:scene:acceptsSetExpression:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["paths"]["value"], 'renameable:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["paths"]["value"], 'deletable:promotable', False )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["paths"]["value"], 'description', "The list of paths to the locations to be matched by the filter.\nA path is formed by a sequence of names separated by `/`, and\nspecifies the hierarchical position of a location within the scene.\nPaths may use Gaffer's standard wildcard characters to match\nmultiple locations.\n\nThe `*` wildcard matches any sequence of characters within\nan individual name, but never matches across names separated\nby a `/`.\n\n - `/robot/*Arm` matches `/robot/leftArm`, `/robot/rightArm` and\n   `/robot/Arm`. But does not match `/robot/limbs/leftArm` or\n   `/robot/arm`.\n\nThe `...` wildcard matches any sequence of names, and can be\nused to match locations no matter where they are parented in\nthe hierarchy.\n\n - `/.../house` matches `/house`, `/street/house` and `/city/street/house`." )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["paths"]["value"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["paths"]["value"], 'ui:scene:acceptsPaths', True )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["paths"]["value"], 'vectorDataPlugValueWidget:dragPointer', 'objects' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["paths"]["value"], 'plugValueWidget:type', 'GafferSceneUI.PathFilterUI._PathsPlugValueWidget' )
__children["Spreadsheet"]["__uiPosition"].setValue( imath.V2f( -20.5499992, 5.14999962 ) )
__children["SetVisualiser"]["in"].setInput( __children["Set"]["out"] )
__children["SetVisualiser"]["filter"].setInput( __children["PathFilter1"]["out"] )
__children["SetVisualiser"]["sets"].setValue( '*' )
__children["SetVisualiser"]["__uiPosition"].setValue( imath.V2f( -5.84999943, -15.01406 ) )
__children["PathFilter1"]["paths"].setValue( IECore.StringVectorData( [ '/...' ] ) )
__children["PathFilter1"]["__uiPosition"].setValue( imath.V2f( 9.35000038, -10.0500011 ) )


del __children

