import Gaffer
import GafferImage
import GafferOSL
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

parent["variables"].addChild( Gaffer.NameValuePlug( "image:catalogue:port", Gaffer.IntPlug( "value", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "imageCataloguePort", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:name", Gaffer.StringPlug( "value", defaultValue = 'default', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectName", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:rootDirectory", Gaffer.StringPlug( "value", defaultValue = '$HOME/gaffer/projects/${project:name}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectRootDirectory", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "project:renderDirectory", Gaffer.StringPlug( "value", defaultValue = '${project:rootDirectory}/renders/${script:name}/${shot}/${layer}/${render_version}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "projectRenderDirectory", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
parent["variables"].addChild( Gaffer.NameValuePlug( "LDTGaffer:resources", Gaffer.StringPlug( "value", defaultValue = '${LDTGaffer}/resources/', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "LDTGafferResources", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["defaultFormat"] = GafferImage.FormatPlug( "defaultFormat", defaultValue = GafferImage.Format( 1920, 1080, 1.000 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["defaultFormat"] )
__children["Cube"] = GafferScene.Cube( "Cube" )
parent.addChild( __children["Cube"] )
__children["Cube"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"] = Gaffer.Box( "Box" )
parent.addChild( __children["Box"] )
__children["Box"].addChild( GafferScene.MeshType( "MeshType" ) )
__children["Box"]["MeshType"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( GafferScene.ScenePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( GafferScene.MeshToPoints( "MeshToPoints" ) )
__children["Box"]["MeshToPoints"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( GafferOSL.OSLObject( "OSLObject" ) )
__children["Box"]["OSLObject"]["primitiveVariables"].addChild( Gaffer.NameValuePlug( "", GafferOSL.ClosurePlug( "value", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "legacyClosure", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["Box"]["OSLObject"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( GafferOSL.OSLCode( "OSLCode" ) )
__children["Box"]["OSLCode"]["parameters"].addChild( Gaffer.IntPlug( "vertexIndex", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"]["OSLCode"]["out"].addChild( Gaffer.IntPlug( "deletePoints", direction = Gaffer.Plug.Direction.Out, defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"]["OSLCode"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( GafferOSL.OSLShader( "OutInt" ) )
__children["Box"]["OutInt"].loadShader( "ObjectProcessing/OutInt" )
__children["Box"]["OutInt"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( GafferScene.PathFilter( "PathFilter" ) )
__children["Box"]["PathFilter"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( GafferScene.DeletePoints( "DeletePoints" ) )
__children["Box"]["DeletePoints"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( GafferScene.Instancer( "Instancer" ) )
__children["Box"]["Instancer"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( GafferScene.ScenePlug( "instances", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( Gaffer.BoxIn( "BoxIn" ) )
__children["Box"]["BoxIn"].setup( GafferScene.ScenePlug( "out", ) )
__children["Box"]["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( Gaffer.BoxIn( "BoxIn1" ) )
__children["Box"]["BoxIn1"].setup( GafferScene.ScenePlug( "out", ) )
__children["Box"]["BoxIn1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( Gaffer.StringPlug( "parent", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( Gaffer.BoxIn( "BoxIn2" ) )
__children["Box"]["BoxIn2"].setup( Gaffer.IntPlug( "out", defaultValue = 0, ) )
__children["Box"]["BoxIn2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( Gaffer.IntPlug( "vertexIndex", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( Gaffer.Expression( "Expression" ) )
__children["Box"]["Expression"]["__in"].addChild( Gaffer.StringPlug( "p0", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"]["Expression"]["__out"].addChild( Gaffer.StringVectorDataPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = IECore.StringVectorData( [  ] ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"]["Expression"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( GafferScene.SubTree( "SubTree" ) )
__children["Box"]["SubTree"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( GafferScene.Parent( "Parent" ) )
__children["Box"]["Parent"]["children"].addChild( GafferScene.ScenePlug( "child1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"]["Parent"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["Box"]["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["Box"]["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( Gaffer.Dot( "Dot" ) )
__children["Box"]["Dot"].setup( GafferScene.ScenePlug( "in", ) )
__children["Box"]["Dot"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Box"].addChild( Gaffer.Dot( "Dot1" ) )
__children["Box"]["Dot1"].setup( GafferScene.ScenePlug( "in", ) )
__children["Box"]["Dot1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["openColorIO"] = GafferImage.OpenColorIOConfigPlug( "openColorIO", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["openColorIO"] )
__children["Sphere"] = GafferScene.Sphere( "Sphere" )
parent.addChild( __children["Sphere"] )
__children["Sphere"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["imageCataloguePort"]["value"].setValue( 36647 )
Gaffer.Metadata.registerValue( parent["variables"]["imageCataloguePort"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectName"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectRootDirectory"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["projectRenderDirectory"]["name"], 'readOnly', True )
Gaffer.Metadata.registerValue( parent["variables"]["LDTGafferResources"]["name"], 'readOnly', True )
__children["Cube"]["__uiPosition"].setValue( imath.V2f( 3.37902069, 2.91725731 ) )
__children["Box"]["MeshType"]["in"].setInput( __children["Box"]["BoxIn"]["out"] )
__children["Box"]["MeshType"]["filter"].setInput( __children["Box"]["PathFilter"]["out"] )
__children["Box"]["MeshType"]["meshType"].setValue( 'linear' )
__children["Box"]["MeshType"]["calculatePolygonNormals"].setValue( True )
__children["Box"]["MeshType"]["__uiPosition"].setValue( imath.V2f( -6.78396463, -1.84874201 ) )
__children["Box"]["in"].setInput( __children["Cube"]["out"] )
Gaffer.Metadata.registerValue( __children["Box"]["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Box"]["in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Box"]["in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["Box"]["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["Box"]["in"], 'noduleLayout:spacing', 2.0 )
__children["Box"]["MeshToPoints"]["in"].setInput( __children["Box"]["MeshType"]["out"] )
__children["Box"]["MeshToPoints"]["filter"].setInput( __children["Box"]["PathFilter"]["out"] )
__children["Box"]["MeshToPoints"]["__uiPosition"].setValue( imath.V2f( -6.78371668, -10.0162964 ) )
__children["Box"]["OSLObject"]["in"].setInput( __children["Box"]["MeshToPoints"]["out"] )
__children["Box"]["OSLObject"]["filter"].setInput( __children["Box"]["PathFilter"]["out"] )
__children["Box"]["OSLObject"]["primitiveVariables"]["legacyClosure"]["value"].setInput( __children["Box"]["OutInt"]["out"]["primitiveVariable"] )
__children["Box"]["OSLObject"]["__uiPosition"].setValue( imath.V2f( -6.7834096, -18.1847115 ) )
__children["Box"]["OSLCode"]["parameters"]["vertexIndex"].setInput( __children["Box"]["BoxIn2"]["out"] )
__children["Box"]["OSLCode"]["code"].setValue( 'int shadingIndex;\ngetattribute( "shading:index", shadingIndex );\ndeletePoints = shadingIndex != vertexIndex;' )
__children["Box"]["OSLCode"]["__uiPosition"].setValue( imath.V2f( -43.3998642, -9.794487 ) )
__children["Box"]["OutInt"]["parameters"]["name"].setValue( 'deletePoints' )
__children["Box"]["OutInt"]["parameters"]["value"].setInput( __children["Box"]["OSLCode"]["out"]["deletePoints"] )
__children["Box"]["OutInt"]["__uiPosition"].setValue( imath.V2f( -32.1730576, -9.19255161 ) )
__children["Box"]["PathFilter"]["paths"].setInput( __children["Box"]["Expression"]["__out"]["p0"] )
__children["Box"]["PathFilter"]["__uiPosition"].setValue( imath.V2f( 6.78654289, 2.09662151 ) )
__children["Box"]["DeletePoints"]["in"].setInput( __children["Box"]["OSLObject"]["out"] )
__children["Box"]["DeletePoints"]["filter"].setInput( __children["Box"]["PathFilter"]["out"] )
__children["Box"]["DeletePoints"]["__uiPosition"].setValue( imath.V2f( -6.78259277, -26.348774 ) )
__children["Box"]["Instancer"]["in"].setInput( __children["Box"]["DeletePoints"]["out"] )
__children["Box"]["Instancer"]["parent"].setInput( __children["Box"]["parent"] )
__children["Box"]["Instancer"]["prototypes"].setInput( __children["Box"]["BoxIn1"]["out"] )
__children["Box"]["Instancer"]["__uiPosition"].setValue( imath.V2f( -6.78259373, -42.2817535 ) )
__children["Box"]["instances"].setInput( __children["Sphere"]["out"] )
Gaffer.Metadata.registerValue( __children["Box"]["instances"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Box"]["instances"], 'description', 'The scene containing the instances to be applied to\neach vertex. Specify multiple instances by parenting\nthem at the root of the scene :\n\n- /instance0\n- /instance1\n- /instance2\n\nNote that the instances are not limited to being a\nsingle object : they can each have arbitrary child\nhierarchies.' )
Gaffer.Metadata.registerValue( __children["Box"]["instances"], 'plugValueWidget:type', '' )
__children["Box"]["BoxIn"]["__in"].setInput( __children["Box"]["in"] )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn"]["__in"], 'labelPlugValueWidget:renameable', True )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn"]["__in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn"]["__in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
__children["Box"]["BoxIn"]["__uiPosition"].setValue( imath.V2f( -6.78378105, 6.48328924 ) )
__children["Box"]["BoxIn1"]["name"].setValue( 'instances' )
__children["Box"]["BoxIn1"]["__in"].setInput( __children["Box"]["instances"] )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn1"]["__in"], 'labelPlugValueWidget:renameable', True )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn1"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn1"]["__in"], 'description', 'The scene containing the instances to be applied to\neach vertex. Specify multiple instances by parenting\nthem at the root of the scene :\n\n- /instance0\n- /instance1\n- /instance2\n\nNote that the instances are not limited to being a\nsingle object : they can each have arbitrary child\nhierarchies.' )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn1"]["__in"], 'plugValueWidget:type', '' )
__children["Box"]["BoxIn1"]["__uiPosition"].setValue( imath.V2f( 20.2166157, -24.4021664 ) )
__children["Box"]["__uiPosition"].setValue( imath.V2f( 6.37902069, -11.3491316 ) )
__children["Box"]["parent"].setValue( '/cube' )
Gaffer.Metadata.registerValue( __children["Box"]["parent"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["Box"]["parent"], 'plugValueWidget:type', 'GafferSceneUI.ScenePathPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["Box"]["parent"], 'description', 'The object on which to make the instances. The\nposition, orientation and scale of the instances\nare taken from per-vertex primitive variables on\nthis object.' )
__children["Box"]["BoxIn2"]["name"].setValue( 'vertexIndex' )
__children["Box"]["BoxIn2"]["__in"].setInput( __children["Box"]["vertexIndex"] )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn2"]["__in"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn2"]["__in"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn2"]["__in"], 'nodule:color', None )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn2"]["__in"], 'description', '' )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn2"]["__in"], 'label', None )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn2"]["__in"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn2"]["__in"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn2"]["__in"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn2"]["__in"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn2"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn2"]["__in"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn2"]["__in"], 'labelPlugValueWidget:renameable', True )
Gaffer.Metadata.registerValue( __children["Box"]["BoxIn2"]["out"], 'noduleLayout:section', 'right' )
__children["Box"]["BoxIn2"]["__uiPosition"].setValue( imath.V2f( -60.6371498, -9.79516888 ) )
__children["Box"]["vertexIndex"].setValue( 2 )
Gaffer.Metadata.registerValue( __children["Box"]["vertexIndex"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["Box"]["vertexIndex"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["Box"]["vertexIndex"], 'nodule:color', None )
Gaffer.Metadata.registerValue( __children["Box"]["vertexIndex"], 'description', '' )
Gaffer.Metadata.registerValue( __children["Box"]["vertexIndex"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["Box"]["vertexIndex"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["Box"]["vertexIndex"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["Box"]["vertexIndex"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["Box"]["vertexIndex"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Box"]["vertexIndex"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["Box"]["vertexIndex"], 'labelPlugValueWidget:renameable', True )
__children["Box"]["Expression"]["__in"]["p0"].setInput( __children["Box"]["parent"] )
__children["Box"]["Expression"]["__uiPosition"].setValue( imath.V2f( 20.1900082, 2.10030937 ) )
__children["Box"]["SubTree"]["in"].setInput( __children["Box"]["Instancer"]["out"] )
__children["Box"]["SubTree"]["root"].setInput( __children["Box"]["parent"] )
__children["Box"]["SubTree"]["__uiPosition"].setValue( imath.V2f( -6.78173065, -50.445816 ) )
__children["Box"]["Parent"]["in"].setInput( __children["Box"]["Dot1"]["out"] )
__children["Box"]["Parent"]["parent"].setInput( __children["Box"]["parent"] )
__children["Box"]["Parent"]["children"][0].setInput( __children["Box"]["SubTree"]["out"] )
__children["Box"]["Parent"]["__uiPosition"].setValue( imath.V2f( -10.2939119, -66.7327042 ) )
__children["Box"]["BoxOut"]["in"].setInput( __children["Box"]["Parent"]["out"] )
Gaffer.Metadata.registerValue( __children["Box"]["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Box"]["BoxOut"]["__out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["Box"]["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
__children["Box"]["BoxOut"]["__uiPosition"].setValue( imath.V2f( -10.2931967, -75.0647354 ) )
__children["Box"]["out"].setInput( __children["Box"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["Box"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["Box"]["out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["Box"]["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
__children["Box"]["Dot"]["in"].setInput( __children["Box"]["BoxIn"]["out"] )
__children["Box"]["Dot"]["__uiPosition"].setValue( imath.V2f( -75.0744705, -1.01671219 ) )
__children["Box"]["Dot1"]["in"].setInput( __children["Box"]["Dot"]["out"] )
__children["Box"]["Dot1"]["__uiPosition"].setValue( imath.V2f( -75.0744705, -43.3531303 ) )
__children["Sphere"]["transform"]["scale"]["x"].setValue( 0.20489999651908875 )
__children["Sphere"]["transform"]["scale"]["y"].setInput( __children["Sphere"]["transform"]["scale"]["x"] )
__children["Sphere"]["transform"]["scale"]["z"].setInput( __children["Sphere"]["transform"]["scale"]["x"] )
__children["Sphere"]["__uiPosition"].setValue( imath.V2f( 16.3790207, 3.65007925 ) )
__children["Box"]["Expression"]["__engine"].setValue( 'python' )
__children["Box"]["Expression"]["__expression"].setValue( 'parent["__out"]["p0"] = IECore.StringVectorData( [ parent["__in"]["p0"] ] )' )


del __children

